[FileIO]
# File path of your data
file_path = ./readmission/
# Directory under 'file_path' containing the 'df_development', 'df_test', 'y_development', 'y_test', 'other_test_feature' and 'other_test_label' files defined below
data_path = data/
# Directory for storing figures generated by the code, which will be stored in 'file_path' if this directory isn’t specified
plot_path = plot/
# Directory for storing result files, which will be stored in 'file_path' if this directory isn’t specified
result_path = result/
# Name of the file containing the dataset you would like to analyse
raw_filename = diabetics_small_set.csv
# The name of the file into which the feature data of the development set are exported
df_development = development_features_data.csv
# The name of the file into which the feature data of the test set are exported
df_test = test_features_data.csv
# The name of the file into which the outcome/label data of the development set are exported
y_development = development_labels_data.csv
# The name of the file into which the outcome/label data of the test set are exported
y_test = test_labels_data.csv
# The name of the file into which the results of RFE process for feature selection are stored
rfe_result_csv = RFE_result.csv
# The name of the file containing the feature data of the additional test set (like test set 2 in our original COVID-19 article, not applicable for example readmission dataset provided here)
other_test_feature = None
# The name of the file containing the outcome/label data of the additional test set  (like test set 2 in our original COVID-19 article, not applicable for the example readmission dataset provided here)
other_test_label = None
# The file format for saving prediction scores, where ‘{}’ will be replaced by the index of ‘n’th test set being considered
predicted_score_format = prediction_scores_test{}.csv


[Pre-processing]
# The names of the features (columns) that are likely to be irrelevant to the outcome,  like encounter id, the insurance company, etc (please retain the patient id, which is needed for further preprocessing steps).
columns_to_drop = encounter_id, payer_code
# The name of the patient id column
patient_id_column = patient_nbr
# The name of the column specifying any criterion for patients to be included in the analysis. This attribute is added since our original study was focused on predicting mortality (deceased or alive) patients with confirmed COVID-19. This value is kept empty for the example readmission data, since no such criteria apply here.
keep_only_matched_patient_column = 
# Only include patients with this value of the above column
keep_only_matched_patient_value = 
# The name of outcome column you would like to predict
outcome_column = readmitted
# If the original outcome is continuous, it needs to be binarized for our code to be applicable. For this, specify the value(s) you would like to consider as the positive label of your outcome specified above. Sample values for the example readmission data are provided below.
outcome_pos_value = >30, <30
# Specify the value(s) you would like to consider as the negative label of your outcome specified above. The sample value for the example readmission data is provided below.
outcome_neg_value = NO
# These values will be converted to np.nan, denoting missing values
unknown_value = ?
# In the example readmission data, the values of age and weight features are binned and included as strings in the original data, which will not work with our code. Thus, in special circumstances like these, which didn’t apply to our original COVID-19 data, this variable can be used to replace these special entries with appropriate values. Sample encodings for the readmission data are provided below. 
value_replacing_dictionary = {'[0-10)': 5, '[10-20)': 15, '[20-30)':25, '[30-40)': 35, '[40-50)': 45,
                        '[50-60)': 55, '[60-70)': 65, '[70-80)': 75, '[80-90)': 85, '[90-100)': 95, 
                        '[0-25)': 12.5, '[25-50)': 37.5, '[50-75)': 67.5, '[75-100)': 87.5,
                        '[100-125)': 112.5, '[125-150)': 137.5, '[150-175)': 162.5, '[175-200)': 187.5,
                        '>200': 212.5}



[Continuous_feature]
# Here, the continuous features (columns) in the 'df_development' file need to be specified, since these are pre-processed into z-scores, and whose missing values are imputed with the mean of the respective available values. The remaining features are considered categorical, and imputed with the mode (most frequent value) of the respective available values.
continuous_feature = age, weight, time_in_hospital, num_lab_procedures, num_procedures, num_medications, number_outpatient, number_inpatient, number_emergency, number_diagnoses