[FileIO]
# File path of your data
file_path = ./readmission/
# Directory under 'file_path' containing 'df_train', 'df_test', 'y_train', 'y_test', 'other_test_feature', 'other_test_label'
data_path = data/
# Directory for generated figures, which will be created under 'file_path' if not exists
plot_path = plot/
# Directory for result files, which will be created under 'file_path' if not exists
result_path = result/
# The fileneame of raw data you would like to analyse, which should be put under the directory of'data_path' inside 'file_path'.
raw_filename = diabetics_small_set.csv
df_train = train_features_data.csv
df_test = test_features_data.csv
y_train = train_labels_data.csv
y_test = test_labels_data.csv
rfe_result_csv = RFE_result.csv
other_test_feature = None
other_test_label = None
predicted_score_format = prediction_scores_test{}.csv

[Preprocessing]
# The irrelevant feature columns to the outcome except the patient id, like encounter id, insurance company etc.
columns_to_drop = encounter_id, payer_code
# The name of the column used to distinguish patient
patient_id_column = patient_nbr
# The name of the column you would like to keep with only matched with certain value, which is not applicable in this sample data. This attribute is added since we are only interested to the deceased outcome for those patients detected with COVID-19
keep_only_matched_patient_column = 
# Keep only this value of the above column
keep_only_matched_patient_value = 
# The name of outcome column you would like to predict
outcome_column = readmitted
# Assign the value you would like consider as positive label of your outcome specified above
outcome_pos_value = >30, <30
# Assign the value you would like consider as negative label of your outcome specified above
outcome_neg_value = NO
# These values will be converted to np.nan as missing value
unknown_value = ?
# The values you would like to replaced with, e.g. since the ages and weights are binned string in the original data, and which should be continuous features instead of categorical features, so we did the mapping as below.
value_replacing_dictionary = {'[0-10)': 5, '[10-20)': 15, '[20-30)':25, '[30-40)': 35, '[40-50)': 45,
                        '[50-60)': 55, '[60-70)': 65, '[70-80)': 75, '[80-90)': 85, '[90-100)': 95, 
                        '[0-25)': 12.5, '[25-50)': 37.5, '[50-75)': 67.5, '[75-100)': 87.5,
                        '[100-125)': 112.5, '[125-150)': 137.5, '[150-175)': 162.5, '[175-200)': 187.5,
                        '>200': 212.5}



[Continuous_feature]
# Continuous feature of 'df_train', since the we will transform the continuous feature by standard scaling and impute the missing value by mean value. The remaining features will be considered as categorical feature, and be imputed by the most frequent category.
continuous_feature = age, weight, time_in_hospital, num_lab_procedures, num_procedures, num_medications, number_outpatient, number_inpatient, number_emergency, number_diagnoses

[RFE]
number_of_feature_to_select = ignore
step_size = 5

[Model_comparison]
# Number of subset feature to choose, a parameter for Section 3.2 and Section 4, if there is any update of this parameter, you can rerun the script from Section 3.2
number_of_subset_features = 6